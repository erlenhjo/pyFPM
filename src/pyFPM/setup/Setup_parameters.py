import sys

class Setup_parameters(object):
    def __init__(self,datadirpath,lens,camera,z_LED,LED_pitch):
        self.lens = lens
        self.camera = camera
        self.z_LED = z_LED
        self.LED_pitch = LED_pitch
        #self.rotation = rotation
        #self.dark_image = "dark_image" ???
        #setup_params.raw_image_pixel_size = ccd_pixel_size / magnification;

    
        self.read_parameters_from_file(datadirpath)


    def read_parameters_from_file(datadirpath):
        parameters = {}

        with open(sys.join(datadirpath,"setup.txt")) as file:
            data = file.read()
        


        print(data)
        print(parameters)

        return 0


"""
function [setup] = read_setup_file(path)
%READ_SETUP_FILE Reads setup data from a setup.txt file generated by
%labview
%   Returns the read data as a struct
data = string(fileread(path));
data = strsplit(data, '\r\n');

% Exposure time
time = find_and_interpret(data, "Exposure time 1");
setup.BF_exposure_time = str2double(time);

% Wavelength and offset
rgb_string = find_and_interpret(data, "RGB");
% string is r,g,b
if 0
    if strcmp("1,0,0", rgb_string)
        %red
        setup.wavelength = 625e-9;
        setup.LED_offset = [0, -0.3] * 1e-3;
    elseif strcmp("0,1,0", rgb_string)
        %green
        setup.wavelength = 520e-9;
        setup.LED_offset = [0, 0.32] * 1e-3; 
    elseif strcmp("0,0,1", rgb_string)
        %blue
        setup.wavelength = 470e-9;
        setup.LED_offset = [0.05, 0.74] * 1e-3;
    else
        error("Invalid RGB string found: %s\n", rgb_string);
    end
end
if strcmp("1,0,0", rgb_string)
    %red
    setup.wavelength = 625e-9;
    setup.LED_offset = [0, -0.7] * 1e-3;
elseif strcmp("0,1,0", rgb_string)
    %green
    setup.wavelength = 520e-9;
    setup.LED_offset = [0, 0] * 1e-3; 
elseif strcmp("0,0,1", rgb_string)
    %blue
    setup.wavelength = 470e-9;
    setup.LED_offset = [0.05, 0.1] * 1e-3;
else
    error("Invalid RGB string found: %s\n", rgb_string);
end

% Multiple exposure times
exp2 = find_and_interpret(data, "Multiple exposure");
if strcmp(exp2, "TRUE")
    setup.DF_exposure_time = str2double(find_and_interpret(data, "Exposure time 2"));
else
    setup.DF_exposure_time = setup.BF_exposure_time;
end

% Inner exposure time radius
exp1_rad = find_and_interpret(data, "Exposure 1 radius");
setup.exp1_radius = str2double(exp1_rad);

% Center LED
center = find_and_interpret(data, "Centre");
center = strsplit(center, ',');
setup.center = str2double(center);

% Get LED shape
shape = find_and_interpret(data, "LED shape");
if strcmp(shape, "Square")
    setup.circular = false;
elseif strcmp(shape, "Circle")
    setup.circular = true;
else
    error("Shape %s not implemented\n", shape);
end

% Get arraysize
arraysize = str2double(find_and_interpret(data, "Radius/width"));
if setup.circular
    setup.radius = arraysize + 1/2; % +0.5 for smoother circle
    setup.arraysize = 2 * arraysize + 1; % file specifies radius
else
    setup.arraysize = arraysize;
    setup.radius = arraysize / 2;
end

% Image format
format = find_and_interpret(data, "Image format");
setup.img_format = format;
end


function ret = find_and_interpret(data, request)
%Finds the string given by request and interprets the information after ':'
%   Returns data as string
row = 1;
% Compare request with the beginning of each row
while ~strcmp(request, data(row).extractBefore(min(strlength(request)+1, ...
        strlength(data(row)))))
    row = row + 1;
    if row > length(data)
        % Not found
        ret = "Not found";
        return 
    end
end
% Row is found, now interpret other side 
line = data(row);
line = strsplit(line, ':');
ret = line(2).extractAfter(1); % Remove preceding space
end



"""